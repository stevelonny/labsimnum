#pragma once

#include <filesystem>
#include <string>
#include <fmt/core.h>
#include <fmt/os.h>

#define ROOT_PATH "@ROOT_PATH@"
#define DATA_PATH "@DATA_PATH@"
#define SEED_PATH "@SEED_PATH@"
#define PRIMES_PATH "@PRIMES_PATH@"
#define IO_PATH "@IO_PATH@"

/* the future is now, old man */

namespace paths{
    const std::filesystem::path path_ROOT(ROOT_PATH);
    const std::filesystem::path path_DATA(DATA_PATH);
    const std::filesystem::path path_SEED(SEED_PATH);
    const std::filesystem::path path_PRIMES(PRIMES_PATH);
    const std::filesystem::path path_IO(IO_PATH);
}

/* add formatter for filepath (ok)*/
/* simply add a way to return the string version of a filesystem::path */
template <> struct fmt::formatter<std::filesystem::path>{
    template<typename ParseContext>
    constexpr auto parse(ParseContext& ctx){
        return ctx.begin();
    }
    template<typename FormatContext>
    auto format(const std::filesystem::path& p, FormatContext& ctx){
        return format_to(ctx.out(), "{}", p.string());
    }
};